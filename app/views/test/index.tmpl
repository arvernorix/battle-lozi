<div id="canvas"></div>
<div id="shoot" style="display: none; position: absolute; top: 650px; color: red;"><h1>SHOOT!!!</h1></div>
<script>
    require([
        'app/templates/game/characters/lozi',
        'vendor/jquery', 'vendor/two'
    ],

    function (lozi) {
        $(document).ready(function() {

            var two = new Two({
                // type: Two.Types.canvas,
                autostart: true,
                width: 1200,
                height: 600
            }).appendTo(document.getElementById('canvas'));

            two.makeRectangle(two.width / 2, two.height / 2, two.width, two.height).fill = '#00B2EE';
            var gridSize = 40;
            var gridCols = Math.round(two.width / gridSize), gridRows = Math.round(two.height / gridSize);
            var current = 0;
            for (var i = 0; i < two.width + gridSize; i += gridSize) {
                for (var j = 0; j < two.height + gridSize; j += gridSize) {
                    two.makeLine(i, 0, i, j);
                    two.makeLine(0, j, i, j);
                }
            }

            var object = new Two.Group();
            object.timePerFrame = 100;
            object.velocity = {
                0: new Two.Vector(0, 0),
                1: new Two.Vector(-1.3, 0), // left
                2: new Two.Vector(0, -1.3), // up
                3: new Two.Vector(1.3, 0), // right
                4: new Two.Vector(0, 1.3) // down
            };
            object.sprites = [];
            object.direction = 0; // 1: left, 2: up, 3: right, 4: down
            object.directions = {
                0: [ 0 ],
                1: [ 0, 1, 2, 3, 4, 5, 6 ],
                2: [ 12, 13, 14, 15, 16, 15, 14, 13 ],
                3: [ 17, 18, 19, 20, 21, 22, 23 ],
                4: [ 7, 8, 9, 10, 11, 10, 9, 8 ]
            };
            object.totalFrames = object.directions[object.direction].length;

            object.setGrid = function (gx, gy) {
                var x = gx * gridSize + gridSize / 2
                var y = gy * gridSize + gridSize / 2 - object.sprites[current].height / 2;
                object.translation.set(x, y);
            };

            two.add(object);

            var $assets = $('<div>' + lozi() + '</div>').find('svg');
            $assets.each(function(i, el) {
                var shape = Two.Utils.read.svg.call(object, el).center();
                shape.height = parseInt($(el).attr('height'), 10);
                shape.width = parseInt($(el).attr('width'), 10);
                shape.visible = false;
                shape.scale = 1;
                object.sprites.push(shape);
            });

            delete $assets;

            var hitBlock = two.makeEllipse(0, object.sprites[0].height / 3, object.sprites[0].width / 3, object.sprites[0].height / 3.5);
            hitBlock.fill = '#FF8000';
            hitBlock.stroke = 'orangered';
            hitBlock.opacity = 0.4;
            object.add(hitBlock);

            object.setGrid(Math.floor(gridCols / 2), Math.floor(gridRows / 2));

            object.animationStartTime = new Date().getTime();

            object.sprites[object.directions[object.direction]].visible = true;

            two.bind('update', function () {
                var now = new Date().getTime();
                var diff = now - object.animationStartTime;
                if (object.direction != 0) {
                    var index = object.directions[object.direction][parseInt(Math.ceil(diff / object.timePerFrame), 10) % object.totalFrames];

                    object.translation.addSelf(object.velocity[object.direction]);

                    var x = object.translation.x,
                        y = object.translation.y + object.sprites[index].height / 2,

                        gx = Math.round((x - gridSize / 2) / gridSize),
                        gy = Math.round((y - gridSize / 2) / gridSize),

                        rx = gx * gridSize + gridSize / 2,
                        ry = gy * gridSize + gridSize / 2;

                    // TODO: Reduce speed here
                    if (object.direction % 2) { // left, right
                        var delta = ry - y;
                        delta = (delta < 0 ? Math.max(delta, -1.3) : Math.min(delta, 1.3));
                        object.translation.addSelf(new Two.Vector(0, delta));

                    } else {
                        var delta = rx - x;
                        delta = (delta < 0 ? Math.max(delta, -1.3) : Math.min(delta, 1.3));
                        object.translation.addSelf(new Two.Vector(delta, 0));
                    }

                    object.sprites[current].visible = false;
                    object.sprites[index].visible = true;
                    current = index;
                }
            });

            var keyFlags = {},

                getLastKey = function () {
                    var last = null;
                    for (var keyCode in keyFlags) {
                        if (keyFlags.hasOwnProperty(keyCode)) {
                            if (!last || keyFlags[last] < keyFlags[keyCode]) {
                                last = keyCode;
                            }
                        }
                    }
                    return (last ? parseInt(last, 10) : null);
                },

                triggerKey = function () {
                    var keyCode = getLastKey();
                    switch (keyCode) {
                        case 37: // left
                            object.direction = 1;
                            object.totalFrames = object.directions[object.direction].length;
                            break;
                        case 38: // up
                            object.direction = 2;
                            object.totalFrames = object.directions[object.direction].length;
                            break;
                        case 39: // right
                            object.direction = 3;
                            object.totalFrames = object.directions[object.direction].length;
                            break;
                        case 40: // down
                            object.direction = 4;
                            object.totalFrames = object.directions[object.direction].length;
                            break;
                    }
                };

            $('body').on('keydown', function (e) {
                if (e.keyCode < 37 || e.keyCode > 40) {
                    return;
                }
                keyFlags[e.keyCode] = new Date().getTime();
                triggerKey();
            });

            $('body').on('keyup', function (e) {
                if (e.keyCode < 37 || e.keyCode > 40) {
                    return;
                }

                var keyCode = getLastKey();
                if (e.keyCode === keyCode) {
                    switch (e.keyCode) {
                        case 37: // left
                            object.direction = 0;
                            object.totalFrames = object.directions[object.direction].length;
                            object.sprites[current].visible = false;
                            current = 0;
                            object.sprites[current].visible = true;
                            break;
                        case 38: // up
                            object.direction = 0;
                            object.totalFrames = object.directions[object.direction].length;
                            object.sprites[current].visible = false;
                            current = 12;
                            object.sprites[current].visible = true;
                            break;
                        case 39: // right
                            object.direction = 0;
                            object.totalFrames = object.directions[object.direction].length;
                            object.sprites[current].visible = false;
                            current = 17;
                            object.sprites[current].visible = true;
                            break;
                        case 40: // down
                            object.direction = 0;
                            object.totalFrames = object.directions[object.direction].length;
                            object.sprites[current].visible = false;
                            current = 7;
                            object.sprites[current].visible = true;
                            break;
                    }
                }

                delete keyFlags[e.keyCode];
                triggerKey();
            });

        });

        var Controller = function (object) {

            var triggerDown = function (keyCode) {
                var e = $.Event('keydown', { keyCode: keyCode, which: keyCode });
                $('body').trigger(e);
            };

            var triggerUp = function (keyCode) {
                var e = $.Event('keyup', { keyCode: keyCode, which: keyCode });
                $('body').trigger(e);
            };

            this.keyDownLeft = function () {
                triggerDown(37);
            };

            this.keyDownUp = function () {
                triggerDown(38);
            };

            this.keyDownRight = function () {
                triggerDown(39);
            };

            this.keyDownDown = function () {
                triggerDown(40);
            };

            this.keyUpLeft = function () {
                triggerUp(37);
            };

            this.keyUpUp = function () {
                triggerUp(38);
            };

            this.keyUpRight = function () {
                triggerUp(39);
            };

            this.keyUpDown = function () {
                triggerUp(40);
            };

            this.shoot = function () {
                $('#shoot').show();
                setTimeout(function () {
                    $('#shoot').hide();
                }, 700);
            };

        };

        var controller = new Controller();

        var AI = function (controller, moveWeight, shootWeight, shootWeightIncrement) {
            this.controller = controller;

            var LEFT = 0,
                UP = 1,
                RIGHT = 2,
                DOWN = 3,
                STOP = 4,
                SHOOT = 5;
            var actions = [ LEFT, UP, RIGHT, DOWN, STOP, SHOOT ];
            var weights = [ 0.1 * moveWeight, 0.1 * moveWeight, 0.1 * moveWeight, 0.1 * moveWeight, 0.6 * moveWeight, shootWeight ];
            weights = weights;
            var rand = function(min, max) {
                return Math.random() * (max - min) + min;
            };

            var getAction = function () {
                var totalWeight = _.reduce(weights, function (mem, num) {
                    return mem + num;
                });

                var randomNum = rand(0, totalWeight);
                var weightSum = 0;

                for (var i = 0; i < actions.length; i++) {
                    weightSum += weights[i];
                    weightSum = +weightSum.toFixed(2);

                    if (randomNum <= weightSum) {
                        return actions[i];
                    }
                }
            };

            var lastAction = -1;

            var act = function () {
                var action = getAction(),
                    res = {};
                if (action === SHOOT) {
                    if (lastAction === SHOOT) {
                        var next = Math.round(rand(0, 4));
                        weights[next] = 0.6 * moveWeight;
                        weights[5] = shootWeight;
                        for (var i = 0; i < 5; i++) {
                            if (i != next) {
                                weights[i] = 0.1 * moveWeight;
                            }
                        }
                    } else {
                        var next = lastAction;
                        weights[next] += weights[5] - shootWeight;
                        weights[5] = shootWeight;
                    }
                } else {
                    weights[5] += shootWeightIncrement;
                    if (action != lastAction) {
                        var remaining = moveWeight - (weights[5] - shootWeight);
                        weights[action] = 0.6 * remaining;
                        for (var i = 0; i < 5; i++) {
                            if (i != action) {
                                weights[i] = 0.1 * remaining;
                            }
                        }
                    } else {
                        for (var i = 0; i < 5; i++) {
                            weights[i] -= shootWeightIncrement / 5;
                        }
                    }
                }
                res.lastAction = lastAction;
                res.action = action;
                lastAction = action;
                return res;
            };

            this.move = function () {
                var action = act();
                if (action.lastAction !== action.action) {
                    switch (action.lastAction) {
                        case LEFT:
                            this.controller.keyUpLeft();
                            break;
                        case UP:
                            this.controller.keyUpUp();
                            break;
                        case RIGHT:
                            this.controller.keyUpRight();
                            break;
                        case DOWN:
                            this.controller.keyUpDown();
                            break;
                        case STOP:
                            break;
                        case SHOOT:
                            break;
                    }
                    switch (action.action) {
                        case LEFT:
                            this.controller.keyDownLeft();
                            break;
                        case UP:
                            this.controller.keyDownUp();
                            break;
                        case RIGHT:
                            this.controller.keyDownRight();
                            break;
                        case DOWN:
                            this.controller.keyDownDown();
                            break;
                        case STOP:
                            break;
                        case SHOOT:
                            this.controller.shoot();
                            break;
                    }
                }
            }
        };

        var ai = new AI(controller, 1, 0.3, 0.01);

        setInterval(function () {
            ai.move();
        }, 1000);

    });
</script>
